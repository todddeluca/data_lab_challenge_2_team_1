# -*- coding: utf-8 -*-
"""Sierra_Leone_Adjacency_Matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yGRKXJC4VVpU7AjkT_UNrSxQZTVShnBw
"""

!pip install geopandas

import geopandas
import pandas as pd
import json

"""## Download Data"""

# Download and Unzip Sierra Leone chiefdom shapefiles
# from https://data.humdata.org/dataset/sierra-leone-all-ad-min-level-boundaries
# (actually downloading from github, since data.humdata.org is not cooperating)
!wget https://github.com/todddeluca/data_lab_challenge_2_team_1/raw/master/data/sle_admbnda_adm3_1m_gov_ocha_20161017.zip
!unzip sle_admbnda_adm3_1m_gov_ocha_20161017.zip
!ls

"""## Plot Chiefdoms"""

chief = geopandas.read_file('sle_admbnda_adm3_1m_gov_ocha_20161017.shp')
# chief.plot()
# chief.head()
sorted_chiefdoms = (chief.loc[:, ['admin1Name', 'admin2Name', 'admin3Name']]
 .sort_values(['admin1Name', 'admin2Name', 'admin3Name']))
for province in ['Eastern', 'Northern', 'Southern', 'Western']:
    for district in sorted_chiefdoms.loc[sorted_chiefdoms["admin1Name"] == province, 'admin2Name'].unique():
        selected = sorted_chiefdoms.loc[(sorted_chiefdoms["admin1Name"] == province) & 
                                        (sorted_chiefdoms["admin2Name"] == district), :]
    
        print(f'chiefdoms in {province}:{district}: {selected.shape[0]}')
        print(selected)

print(sorted_chiefdoms['admin1Name'].unique())

"""## Create Adjacency List for Chiefdoms

GeoPandas GeoSeries objects have a "distance" function (from Shapely) that is used here to create an adjacency list for the chiefdoms.
"""

# This takes a few minutes

def make_distance_matrix(chief):
    """
    Returns a dataframe whose columns are indexed by OBJECTID
    and whose ith row index refers to the ith OBJECTID. Each column is
    the geopandas/shapely distance between the geometry objects corresponding
    to the row and column OBJECTIDs. 

    Distance == 0.0 if the two shapes have touching/overlapping boundaries.
    """
    # dist_to_objectid_1 = chief['geometry'].distance(chief['geometry'][0])
    # chief.loc[dist_to_objectid_1==0, :]

    # adjacency matrix
    # for every chiefdom, calculate distance to geometry column.
    # distance of 0 represents adjacency
    num_chiefdoms = len(chief)
    distmat = pd.DataFrame()
    for i in range(num_chiefdoms)[:]:
        id_ = chief['OBJECTID'][i]
        print(id_, end=' ')
        dist = chief['geometry'].distance(chief['geometry'][i])
        distmat[id_] = dist
        
    return distmat

distmat = make_distance_matrix(chief)

adjmat = distmat == 0
adjmat['OBJECTID1'] = chief['OBJECTID']
adj = adjmat.melt(id_vars=['OBJECTID1'], var_name='OBJECTID2')


adj = adj.loc[adj['value']].drop(columns=['value'])
adj = (adj.merge(chief.loc[:, ['OBJECTID', 'admin1Name', 'admin2Name', 'admin3Name']] , 
           how='left', left_on='OBJECTID1', right_on='OBJECTID')
    .drop(columns=['OBJECTID']).rename(columns={'admin1Name': 'OBJECTID1_admin1Name',
                                                'admin2Name': 'OBJECTID1_admin2Name',
                                                'admin3Name': 'OBJECTID1_admin3Name'})
    .merge(chief.loc[:, ['OBJECTID', 'admin1Name', 'admin2Name', 'admin3Name']] , 
           how='left', left_on='OBJECTID2', right_on='OBJECTID')
    .drop(columns=['OBJECTID']).rename(columns={'admin1Name': 'OBJECTID2_admin1Name',
                                                'admin2Name': 'OBJECTID2_admin2Name',
                                                'admin3Name': 'OBJECTID2_admin3Name'})
)
adj.tail(10)
adj.to_csv('sierra_leone_chiefdom_adjacency.csv', index=False)
adj

"""## Plot Chiefdoms in Plotly

Converting geopandas/shapefile to geojson, which plotly uses
https://community.plot.ly/t/create-your-own-choropleth-map-with-custom-shapefiles/2567/7

Plotly Choropleth maps
https://plot.ly/python/choropleth-maps/
"""

# If your shapefile has coordinates in UTM format, 
# and you want to transform them into WGS84 (Lat / Lon format), you can do this:
# geodf = geodf.to_crs({'init': 'epsg:4326'})
print(chief.crs)

# Create a geojson file for Plotly
chiefdom_geojson_filename = "chiefdom.geojson"
chief.to_file(chiefdom_geojson_filename, driver = "GeoJSON")
with open(chiefdom_geojson_filename) as fh:
    chief_geojson = json.load(fh)
!pip install plotly==4.5.1
import plotly
print(plotly.__version__)

#!pip install plotly==4.5.0
import plotly
import plotly.express as px
print(plotly.__version__)
# Plot Chiefdoms, colored by district
fig = px.choropleth(
    chief,
    geojson=chief_geojson,
#     color='Shape_Area',  
    color='admin2Name',
    locations="OBJECTID", 
    featureidkey="properties.OBJECTID",
    )
# go.Figure()
fig.update_geos(fitbounds="locations", visible=False)
# fig.update_geos(lataxis_showgrid=True, lonaxis_showgrid=True)
fig.update_layout(mapbox_style="white-bg")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

fig.update_geos(fitbounds="locations", visible=False)
# fig.update_geos(lataxis_showgrid=True, lonaxis_showgrid=True)
fig.update_layout(mapbox_style="white-bg")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()