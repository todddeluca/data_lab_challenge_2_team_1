# -*- coding: utf-8 -*-
"""Sierra_Leone_Map.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f9m9ry37S-7g7dE1GaYbneUGfyfxETIw

# Mapping Sierra Leone

Data Lab Challenge 2
"""

!pip install geopandas
!pip install plotly==4.5.0

# Commented out IPython magic to ensure Python compatibility.
import geopandas
import gzip
import io
import json
import pandas as pd
import plotly
import plotly.express as px
from pprint import pprint
import requests

# %matplotlib inline

"""## Download Raw Data

Raw data includes the `all_paper_data_xlsx`, `digital.csv`, and `digital_codebook.csv` tables.
"""



def download_all_paper_data():
    # download and gunzip the spreadsheet
    content = gzip.decompress(requests.get("https://github.com/todddeluca/data_lab_challenge_2_team_1/raw/master/data/all_paper_data.xlsx.gz").content)
    # load each sheet into a dataframe
    trigger_na = pd.read_excel(io.BytesIO(content), sheet_name="Trigger_NA")
    trigger_ave = pd.read_excel(io.BytesIO(content), sheet_name="Trigger_Ave")
    trigger_other = pd.read_excel(io.BytesIO(content), sheet_name="Trigger Other")
    follow_up = pd.read_excel(io.BytesIO(content), sheet_name="Follow Up")
    follow_up_other = pd.read_excel(io.BytesIO(content), sheet_name="Follow Up Other")
    codebook = pd.read_excel(io.BytesIO(content), sheet_name="Codebook")
    return trigger_na, trigger_ave, trigger_other, follow_up, follow_up_other, codebook


def download_digital_data():
    # content = gzip.decompress(requests.get("https://github.com/todddeluca/data_lab_challenge_2_team_1/raw/master/data/digita.csv.gz").content)
    digital = pd.read_csv(
        "https://github.com/todddeluca/data_lab_challenge_2_team_1/raw/master/data/digital.csv.gz",
        low_memory=False)
    # the digital codebook is not structured as a table. 
    # See https://github.com/todddeluca/data_lab_challenge_2_team_1/raw/master/data/digital_codebook.xls
    return digital


def  download_chiefdom_adjacency_data():
    url = 'https://raw.githubusercontent.com/todddeluca/data_lab_challenge_2_team_1/master/data/sierra_leone_chiefdom_adjacency.csv'
    adj = pd.read_csv(url, low_memory=False)
    return adj


def download_chiefdom_geojson():
    '''return chiefdom geojson data as text'''
    url = 'https://github.com/todddeluca/data_lab_challenge_2_team_1/raw/master/data/chiefdom.geojson'
    return requests.get(url).json

def download_chiefdom_geopandas():
    '''return chiefdom geojson as geopandas'''
    url = 'https://github.com/todddeluca/data_lab_challenge_2_team_1/raw/master/data/chiefdom.geojson'
    chief = geopandas.read_file(url)
    return chief

adj = download_chiefdom_adjacency_data()
# adj
trigger_na, trigger_ave, trigger_other, follow_up, follow_up_other, codebook = download_all_paper_data()
# trigger_na, trigger_ave, trigger_other, follow_up, follow_up_other, codebook
digital = download_digital_data()
# digital

chief = download_chiefdom_geopandas()
# chief
chief_geojson = download_chiefdom_geojson()
# chief_geojson
chiefdom_geojson_filename = "chiefdom.geojson"
chief.to_file(chiefdom_geojson_filename, driver = "GeoJSON")
with open(chiefdom_geojson_filename) as fh:
    chief_geojson = json.load(fh)

# with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also
with pd.option_context('display.max_rows', 20, 'display.max_columns', 10):  # more options can be specified also
    print('num unique chiefdom:', trigger_ave['Chiefdom'].unique().shape[0])
    print('how many observations per chiefdom in trigger_ave table?')
    pprint(trigger_ave['Chiefdom'].value_counts())

"""## Plot Chiefdoms in Plotly

Converting geopandas/shapefile to geojson, which plotly uses
https://community.plot.ly/t/create-your-own-choropleth-map-with-custom-shapefiles/2567/7

Plotly Choropleth maps
https://plot.ly/python/choropleth-maps/
"""

# If your shapefile has coordinates in UTM format, 
# and you want to transform them into WGS84 (Lat / Lon format), you can do this:
# geodf = geodf.to_crs({'init': 'epsg:4326'})
print(chief.crs)

print(plotly.__version__)
# Plot Chiefdoms, colored by district
fig = px.choropleth(
    chief,
    geojson=chief_geojson,
#     color='Shape_Area',  
    color='admin2Name',
    locations="OBJECTID", 
    featureidkey="properties.OBJECTID",
    )
# go.Figure()
fig.update_geos(fitbounds="locations", visible=False)
# fig.update_geos(lataxis_showgrid=True, lonaxis_showgrid=True)
fig.update_layout(mapbox_style="white-bg")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()



